1 АРХІТЕКТУРА ТА ОПИС ПРОГРАМНИХ ЗАСОБІВ

1.1 Взаємодія з серверною частиною та обробка повідомлень
При розробці рішення використовувалися плата Arduino Wemos D1 на базі ESP8266 та датчик для зчитування міток MFRC522. Для взаємодії пристрою та серверної частини використовуються протокол MQTT та хмарний сервіс Azure IoT Hub, бібліотека для підключення до хмарного сервісу Azure SDK for C. Наступний фрагмент коду демонструє підключення використовуючи протокол MQTT під час запуску пристрою.
Пристрій та серверна частина та пристрій обмінюються текстовими повідомленнями в форматі JSON. Нижче наведено фрагмент коду що демонструє обробку повідомлень пристроєм на прикладі отримання повідомлення про початок тренувальної сесії.
Фрагмент коду що демонструє надсилання повідомлень з пристрою наведено у додатку В. Наступний фрагмент коду демонструє зчитування піднесення мітки.
Дані з пристроїв, які приходять на Azure IoT Hub пересилаються в чергу повідомлень Azure Service Bus. Для опрацювання даних з пристроїв було розроблено окремий сервіс, що розгортається як фонова задача на сервері та періодично зчитує повідомлення з черги, отримавши нове повідомлення визначається тип повідомлення і відповідні дані зберігаються у базу даних. Приклад програмного коду опрацювання сервісом повідомлень з черги наведено у додатку Г.
1.2 Конфігурування пристрою
Для конфігурації пристроїв розроблено окремий консольний застосунок, який зчитує введені адміністратором пароль та назву мережі WiFi, унікальний ідентифікатор пристрою та ключ для авторизації у хмарному сервісі. Застосунок записує отриману конфігурацію через USB порт. Нижче наведено фрагмент програмного коду консольного застосунку, який відповідає за запис конфігурації.
Пристрій зчитує отриману конфігурацію та зберігає її в пам’ять пристрою. Нижче наведено фрагмент програмного коду, що відповідає за запис отриманої конфігурації.
1.3 Забезпечення безпеки в застосунку
Для забезпечення безпечного з’єднання з сервером в програмному застосунку були реалізоване використання сертифікатів для встановлення безпечного мережевого з'єднання. Наступний фрагмент демонструє використання сертифікатів та встановлення сертифікату під час встановлення мережевого з'єднання(повний текст сертифікату скорочено).
Також для забезпечення з'єднання по протоколу MQTT, використовувався пароль, що генерується на основі ключа переданого під час конфігурування пристрою адміністратором за допомогою засобів використаної бібліотеки, пароль має термін придатності та періодично оновлюється.
1.4 Локалізація та інтернаціоналізація
В частині IoT застосунку програмної системи реалізована локалізація та інтернаціоналізація: при надсиланні часу проходження етапу, його формат визначається на підставі визначеної локалізації, вибрана локалізація встановлюється під час початку тренувальної сесії, відповідно під час обробки результату серверної частини, час обробляється відповідно до визначеної локалізації і далі зберігається в універсальному форматі. Наступний фрагмент коду демонструє форматування часу проходження етапу перед надсиланням.
1.5 Обробка даних користувачів з використанням ефективних математичних методів
В частині IoT застосунку програмної системи реалізована наступна бізнес-логіка та математичні методи обробки даних: вирахування середнього значення часу проходження певного етапу програми в секундах. Для цього під час початку спроби учасника пристрій приймає дату і час початку спроби, зберігає її, під час того як пристрій зафіксував проходження етапу, від часу початку спроби віднімається час проходження етапу та зберігається у пристрої, після отримання повідомлення про завершення тренувальної сесії, пристрій вираховує середнє значення часу проходжень та відправляє на сервер. У настпуному фрагменті коду демонструється вирахування середньго значення часу проходження етапу програм учасниками.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Функції системи які реалізовані в частині IoT застосунку включають в себе конфігурування пристрою адміністратором системи, початок та завершення тренувальних сесій, початок та завершення спроб учасників інструктором. Також після проходження етапу користувач має можливість бачити результат проходження етапу та середній час проходження етапів після завершення тренувальної сесії. Діаграма прецедентів зображена на рисунку 1.1.

3 ПОБУДОВА ДІАГРАМИ СТАНІВ

Використання пристрою передбачає наступні кроки: спершу адміністратор системи конфігурує пристрій, він задає пароль та назву мережі WiFi, для доступу в Інтернет та підключення до хмарного сервісу, вказує унікальний ідентифікатор пристрою та ключ для авторизації з хмарним сервісом, коли пристрій готовий до використання інструктор розпочинає сесію, на цьому етапів пристрій записує ідентифікатор сесії та яку локалізацію використовувати для надсилання відповіді, після цього пристрій переходить в стан незавершеної сесії очікуючи початку спроб учасників. Зміну станів системи проілюстровано на рисунку 1.2.

3 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Наступним кроком інструктор для кожного учасника запускає проходження програми, пристрій переходить в стан очікування проходження етапу, очікуючи або завершення спроби учасника або інформації про проходження з датчика. В разі якщо датчик зафіксував проходження відповідь надсилається на сервер. Після проходження всіх учасників, інструктор завершує сесію, на отримання повідомлення про закінчення сесії пристрої надсилають середній час проходження свого етапу. Діаграму взаємодії консольного застосунку для конфігурації, пристрою та серверної частини розміщено в додатку А.

4 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Порядок виконання дій проілюстровано на діаграмі діяльності розміщеної в додатку Б.

ВИСНОВКИ

В результаті розробки частини IoT застосунку програмної системи «Програмна система для автоматизації проведення тренувань та змагань з керування дронами» описано прийняті інженерні рішення, загальну архітектуру системи, використовуються безпечні протоколи взаємодії, забезпечена локалізація та інтернаціоналізація, робота з датами та часом, механізми комунікації пристрою з серверною частиною, реалізовані математичні методи обробки даних. Звіт включає в себе наступні діаграми: UML діаграму станів, UML діаграму прецедентів,UML діаграму взаємодії, UML діаграму діяльності.