1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Під час проектування клієнтського застосунку використано дворівневу архітектуру. Перш за все увесь програмний код застосунку фізично було розбито на окремі незалежні модулі, в яких відокремлено програмний код та логіку, характерну для певної функціональності системи. Логічно кожний з модулів відноситься до одного з рівнів: рівень представлення або рівень доступу до даних, який використовуючи HTTP-клієнт надсилає відповідні запити до серверної частини. На рисунку 2.1 зображено діаграму компонентів клієнтської частини застосунку.
На рівні представлення знаходяться модулі, що містять в собі та файли розмітки та класи, що відповідають на оновлення представлень, реагування та користувацький ввід, обробку подій. Кожна сторінка представлення складається з одного такого класу та файлу розмітки. На рисунку 2.2 зображена структура такої сторінки на прикладі сторінки для відображення списку резервних копій.
Кожна така сторінка використовує шаблон MVVM, файл з розширенням .ts, відповідає Моделі представлення, та повідомляє представлення про оновлення стану, а також реагує на оновлення представлення і комунікує з моделлю, якої в даному випадку виступають класи доступу до даних через HTTP-клієнт, таким чином зберігається розділення відповідальності і представлення не комунікує з моделлю на пряму. Нижче наведено приклад фрагментів програмного коду, що демонструє дану взаємодію. У першому фрагменті модель представлення використовує інтерфейс, що надає компонент доступу до даних отримує список резервних копій та оновлює відповідне поле.
У наступному прикладі представлення підписується на оновлення даного поля та оновлює його після отримання повідомлення.
У наступному фрагментах програмного коду демострується повідомлення представленням моделі представлення про зміни та реагування моделі представлення, а також повідомлення моделлю представлення моделі про необхідність оновлення стану.
Структура клієнтської частин додатку, розділення програмного коду на модулі та взаємодія між ними зображені на діаграмі пакетів(див. рис. 2.3).
Пакетом, що інкапсулює в собі взаємодію з серверною частиною виступає пакет під назвою CoreModule, від надає назовні інтерфейси які містять методи, оновлення, додавання, видалення, отримання даних,  а також в ньому знаходяться класи моделей запитів та відповідей, що приходять з серверу або надсилаються на сервер. У наступному фрагменті коду продемонстровано надсилання запиту за допомогою HTTP-клієнта.
Таким чином дана функціональність не виноситься за межі модуля та цей модуль логічно відноситься до рівня доступу до даних.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Клієнтська частина програмної системи включає в себе функції адмініструванн та управління процесом навчання інструкторами. Функції адміністрування системи доступні лише системним адміністраторам та включають в себе управління та створення резервних копій баз даних, управління та додавання нових користувачів у систему, створення на управління організаціями, що використовують дану систему, а також управління та реєстрація нових пристроїв цих організацій у системі. Діаграму прецедентів для типу користувача Адміністратор зображено на рисунку 1.1.
Також до клієнтської частини програмної системи мають доступ інструктори. Діаграму прецедентів для типу користувача Адміністратор зображено на рисунку 1.2.
Функції доступні інструкторам включають в себе створення та управління тренувальними групами та програмами, створення тренувальних програм з використанням пристроїв, що відведені організації до якої належить інструктор, додавання нових учасників до групи, створення та управління тренувальними сесіями для відповідної групи.

3 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Для виконання основної задачі системи, а саме проведення тренувань адміністратор та інструктор мають виконати відповідні підготовчі дії. Відповідно до функцій передбачених у системі, адміністратор спочатку створюює профіль організації у системі та додає її пристрої, а також додає нового інструктора до організації. Порядок виконання цих дій для типу користувача Адміністратор зображений на рисунку 1.3.
Після того, як інструктор був доданий, він має можливість увійти в систему та розпочати підготовчі дії для проведення тренувальних сесій. Порядок виконання цих дій для типу користувача Інструктор зображений на рисунку 1.4.
В першу чергу інструктор строює тренувальну програму, використовуючи пристрої організації, наступним кроком він створює тренувальну групу та додає до неї учасників, після цього для відповідної тренувальної групи створюється тренувальна сесія, з визначеною програмою та часом проведення.                

4 ОПИС ТЕХНІЧНИХ РІШЕНЬ

В клієнтському застосунку програмної системи відповідно до вимог використовуються механізми авторизації аутентифікації, використання безпечних протоколів передачі даних HTTPS, обмеження доступу до функцій системи відповідно до ролі користувача.
Механізми аутентифікації передбачають використання використання JWT токенів для отримання доступу до системи під час входу, генерація яких відбувається на стороні серверної частини за допомогою унікального приватного ключа.
Токен також містить в собі інформацію про роль користувача, на стороні клієнтського застосунку відповідно до ролі користувачу надається доступ до певних функцій системи, наприклад функції адміністрування: управління організаціями, користувачами та резервними копіями доступні лише користувачам з роллю Адміністратор.
2.3 Локалізація та інтернаціоналізація
В системі передбачена підтримка локалізації для англійської та української мов. Переклади текстів зберігаються у файлах ресурсів, користувач має змогу динамічно змінювати мову застосунку. У нижче наведених прикладах програмного коду продемонстровано, зберігання перекладів та локалізація текстів у представленнях.
Для підтримки локалізації була використана бібліотека npx-translate.
2.4 Вибір технологій та графічний інтерфейс системи
Сторінки клієнтської частини використовують різноманітні елементи управління, такі як таблиці, модальні вікна для зручного представлення відповідної інформації. На рисунках 2.4 - 2.5 наведені приклади графічного інтерфейсу клієнтської частини застосунку.
Для реалізації клієнтського застосунку були використані HTML, CSS, TypeScript, бібліотеки Angular 13, Angular Material та Bootstrap.

ВИСНОВКИ

В результаті розробки частини клієнтського застосунку програмної системи «Програмна система для автоматизації проведення тренувань та змагань з керування дронами» описано прийняті інженерні рішення, загальну архітектуру системи, використовуються безпечні протоколи взаємодії, забезпечена локалізація та інтернаціоналізація, робота з датами та часом, механізми комунікації пристрою з серверною частиною, реалізовані математичні методи обробки даних. Звіт включає в себе наступні діаграми: Звіт включає в себе наступні діаграми: UML діаграму компонент, UML діаграму прецедентів, UML діаграму пакетів, UML діаграму діяльності, приклади графічного інтерфейсу застосунку.